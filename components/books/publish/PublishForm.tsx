'use client';

import { useState } from 'react';
import { toast } from 'sonner';
import BookInfoSummary from './BookInfoSummary';
import CommonOptions from './CommonOptions';
import FormatOptions from './FormatOptions';
import ActionButtons from './ActionButtons';
import PublishPreview from './PublishPreview';
import { usePublishBook } from '@/queries/usePublishBook';
import { BookPreview } from './BookPreview';

interface Book {
  id: string;
  title: string;
  subtitle?: string;
  author?: string;
  description?: string;
  isbn?: string;
  publisher?: string;
  // Add other book properties as needed
}

interface PublishFormProps {
  book: Book;
}

export default function PublishForm({ book }: PublishFormProps) {
  const [state, setState] = useState({
    format: 'epub',
    includeToc: true,
    includeImprint: false,
    splitByChapters: true,
    applyStyles: true,
    theme: 'modern',
    pageSize: 'A4',
    margins: 'Medium',
    embedFonts: false,
    includeCss: 'inline',
  });

  // Removed unused router
  const [previewHtml, setPreviewHtml] = useState<string | null>(null);
  const [isPreviewing, setIsPreviewing] = useState(false);

  // Publish mutation
  const { mutate: publish, isPending: isPublishing } = usePublishBook();

  // Handle form submission
  const handlePublish = () => {
    publish(state.format as 'pdf' | 'epub' | 'mobi', {
      onSuccess: (result) => {
        toast.success('Book published successfully!');
        // Handle successful publish (e.g., show download link)
        console.log('Publish result:', result);
      },
      onError: (error: Error) => {
        toast.error(error.message || 'Failed to publish book');
      }
    });
  };

  // Preview functionality
  const handlePreview = () => {
    setIsPreviewing(true);
    // The preview will be generated by the BookPreview component
    // and will call handlePreviewReady when done
  };

  const handleChange = (key: keyof typeof state, value: string | boolean) => {
    setState(prev => ({
      ...prev,
      [key]: value
    }));
  };
  
  // Wrapper function to handle string keys from CommonOptions
  const handleCommonOptionsChange = (key: string, value: string | boolean) => {
    if (Object.keys(state).includes(key)) {
      handleChange(key as keyof typeof state, value);
    }
  };
  
  // Handle preview ready callback from BookPreview component
  const handlePreviewReady = (html: string) => {
    setPreviewHtml(html);
    // Note: We don't set isPreviewing to false here anymore
    // because we want to keep the preview loading state until
    // the preview is ready to be rendered
  };

  return (
    <div className="space-y-6">
      <BookInfoSummary book={book} />
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <CommonOptions 
          state={state} 
          onChange={handleCommonOptionsChange} 
        />
        <FormatOptions 
          format={state.format}
          state={state} 
          onChange={handleCommonOptionsChange} 
        />
      </div>
      
      <div className="mt-6">
        <ActionButtons 
          isPublishing={isPublishing} 
          isPreviewLoading={isPreviewing}
          onPublish={handlePublish}
          onPreview={handlePreview}
          isDisabled={isPublishing || isPreviewing}
        />
        
        {isPreviewing && (
          <div className="mt-6">
            <BookPreview onPreviewReady={handlePreviewReady} />
          </div>
        )}
        
        {previewHtml && !isPreviewing && (
          <div className="mt-6">
            <PublishPreview html={previewHtml} />
          </div>
        )}
      </div>
    </div>
  );
}
