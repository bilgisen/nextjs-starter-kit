name: Build and Publish EPUB

on:
  workflow_dispatch:
    inputs:
      slug:
        description: 'Book slug'
        required: true
        type: string
      payload:
        description: 'URL to fetch the book payload'
        required: true
        type: string
      token:
        description: 'Authentication token'
        required: true
        type: string

env:
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'https://your-app-url.com' }}
  NEXT_EPUB_SECRET: ${{ secrets.NEXT_EPUB_SECRET }}

jobs:
  build-epub:
    name: Build EPUB
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Fetch book data
        id: fetch-book
        env:
          AUTH_TOKEN: ${{ github.event.inputs.token }}
        run: |
          echo "Fetching book data from ${{ github.event.inputs.payload }}"
          mkdir -p ./book-content
          curl -s -H "Authorization: Bearer ${{ github.event.inputs.token }}" \
            -o ./book-content/book.json \
            "${{ github.event.inputs.payload }}"
            
          # Verify the file was downloaded
          if [ ! -f "./book-content/book.json" ]; then
            echo "Failed to download book data"
            exit 1
          fi
          
          echo "Book data downloaded successfully"

      - name: Generate EPUB
        run: |
          echo "Generating EPUB for ${{ github.event.inputs.slug }}"
          # Add your EPUB generation command here
          # Example: node scripts/generate-epub.js ./book-content/book.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: epub-file
          path: ./output/*.epub
          retention-days: 1
